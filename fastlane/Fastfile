fastlane_version "2.62.1"

default_platform :android

platform :android do

  desc "Runs all the tests"
  lane :test do
    gradle(task: "jvmTest")
  end

  desc "Deploy artifacts to Bintray"
  lane :deploy do |options|
    branch = options[:branch] || "master"
    #prepare_git(branch)

    versionFile = "buildSrc/src/main/kotlin/Library.kt"
    versionFilePath = "../#{versionFile}"
    versionRegex = /\d+\.\d+\.\d+/

    changelogFile = "CHANGELOG.md"
    changelogFilePath = "../#{changelogFile}"
    changelogRegex = /Unreleaded/

    version = currentVersion(versionFilePath, versionRegex)
    puts "Current version: #{version}"

    type = options[:type]
    version.increment(type)
    editVersion(versionFilePath, versionRegex, version)
    editVersion(changelogFilePath, changelogRegex, version)
    puts "New version: #{version}"

    branchName = "version-#{version}"
    sh("git checkout -b #{branchName}")

    git_commit(path: [versionFile], message: "Version #{version}")
    add_git_tag(tag: version.to_str)
    push_to_git_remote(remote: "origin")

    create_pull_request(
        # api_token: "secret",      # optional, defaults to ENV["GITHUB_API_TOKEN"]
        repo: "algolia/algoliasearch-client-kotlin",
        title: "Deploying new version #{version}",
        head: "#{branchName}",
        base: "master", # optional, defaults to "master"
        body: "Please check the files before merging in case I've overidden something accidentally."
    )

    gradle(task: "assemble bintrayUpload")
  end

  def prepare_git(branch)
    if !ENV['BITRISE_BUILD_NUMBER'] # ensure git clean locally but not on Bitrise.
      ensure_git_status_clean
    end

    # ensure_git_branch(branch:branch)
    masterHash = sh("git rev-parse origin/#{branch}")
    headHash = sh("git rev-parse HEAD")

    if masterHash != headHash
      raise "Error: Master and Head Hashes do not match, meaning that we are probably not on Master and therefore can't deploy"
    end

    # checkout master to be able to push tag there.
    sh("git checkout #{branch}")
  end

  def currentVersion(versionFile, versionRegex)
    current = File.read(versionFile)[versionRegex].split(".")
    Version.new(current[0], current[1], current[2])
  end

  def editVersion(versionFile, versionRegex, version)
    text = File.read(versionFile)
    new_contents = text.gsub(versionRegex, version)
    File.open(versionFile, "w") { |file| file.puts new_contents }
  end
end

class Version
  attr_accessor :major
  attr_accessor :minor
  attr_accessor :patch

  def initialize(major, minor, patch)
    @major = major.to_i
    @minor = minor.to_i
    @patch = patch.to_i
  end

  def to_s
    "#{major}.#{minor}.#{patch}"
  end

  def to_str
    "#{major}.#{minor}.#{patch}"
  end

  def increment(type)
    case type
    when /patch*/
      incrementPatch
    when /minor*/
      incrementMinor
    when /major*/
      incrementMajor
    else
      raise "Type needed: major.*|minor.*|patch.*"
    end
  end

  def incrementPatch
    @patch += 1
  end

  def incrementMinor
    @minor += 1
    @patch = 0
  end

  def incrementMajor
    @major += 1
    @minor = 0
    @patch = 0
  end
end
